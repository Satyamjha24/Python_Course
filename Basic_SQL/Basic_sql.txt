 
 -------------------------------------------------  SET-1  ------------------------------------------------------------

Problem-1 : Create a Customers table / collection with the following fields: id (unique identifier), name, email, address, and phone_number.

CREATE TABLE Customers (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    address VARCHAR(255),
    phone_number VARCHAR(50)
);

Problem-2 : Insert five rows / documents into the Customers table / collection with data of your choice

    INSERT INTO Customers (id, name, email, address, phone_number)
    VALUES
    (1, 'Alice Johnson', 'alice@example.com', '123 Park Ave', '555-111-1111'),
    (2, 'Bob Smith', 'bob@example.com', '456 Elm St', '555-222-2222'),
    (3, 'Charlie Brown', 'charlie@example.com', '789 Oak Rd', '555-333-3333'),
    (4, 'David Lee', 'david@example.com', '101 Maple Ln', '555-444-4444'),
    (5, 'Eva White', 'eva@example.com', '202 Cedar Dr', '555-555-5555');


Problem-3: Write a query to fetch all data from the Customers table .

    SELECT * FROM Customers;

Problem-4: Write a query to select only the name and email fields for all customers.
    SELECT name, email FROM Customers;

Problem-5: Write a query to fetch the customer with the id of 3.
    SELECT * FROM Customers WHERE id = 3;

Problem-6: Write a query to fetch all customers whose name starts with 'A'.
    SELECT * FROM Customers WHERE name LIKE 'A%';

Problem-7: Write a query to fetch all customers, ordered by name in descending order.
    SELECT * FROM Customers ORDER BY name DESC;

Problem-8: Write a query to update the address of the customer with id 4.
    UPDATE Customers SET address = 'New Address' WHERE id = 4;

Problem-9: Write a query to fetch the top 3 customers when ordered by id in ascending order.
    SELECT * FROM Customers ORDER BY id ASC LIMIT 3;

Problem-10: Write a query to delete the customer with id 2.
    DELETE FROM Customers WHERE id = 2;

Problem-11: Write a query to count the number of customers.
    SELECT COUNT(*) FROM Customers;

Problem-12: Write a query to fetch all customers except the first two when ordered by id in ascending order.
    SELECT * FROM Customers ORDER BY id ASC OFFSET 2;

Problem-13: Write a query to fetch all customers whose id is greater than 2 and name starts with 'B'.
    SELECT * FROM Customers WHERE id > 2 AND name LIKE 'B%';

Problem-14: Write a query to fetch all customers whose id is less than 3 or name ends with 's'.
    SELECT * FROM Customers WHERE id < 3 OR name LIKE '%s';

Problem-15: Write a query to fetch all customers where the phone_number field is not set or is null.
    SELECT * FROM Customers WHERE phone_number IS NULL OR phone_number = '';


    -------------------------------------------------  SET-2  ------------------------------------------------------------

Problem-16: Create a Restaurants table / collection with the fields defined above.
    CREATE TABLE Restaurants (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    cuisine_type VARCHAR(100),
    location VARCHAR(255),
    average_rating DECIMAL(3,2),
    delivery_available BOOLEAN
);

Problem-17: Insert five rows / documents into the Restaurants table / collection with data of your choice.
    INSERT INTO Restaurants (id, name, cuisine_type, location, average_rating, delivery_available)
    VALUES
    (1, 'Pizza Palace', 'Italian', '123 Main St', 4.8, true),
    (2, 'Noodle House', 'Chinese', '456 Elm St', 4.6, true),
    (3, 'Burger Joint', 'American', '789 Oak Rd', 4.3, true),
    (4, 'Sushi Sushi', 'Japanese', '101 Maple Ln', 4.9, true),
    (5, 'Curry Corner', 'Indian', '202 Cedar Dr', 4.7, false);

Problem-18: Write a query to fetch all restaurants, ordered by average_rating in descending order.
    SELECT * FROM Restaurants ORDER BY average_rating DESC;

Problem-19: Write a query to fetch all restaurants that offer delivery_available and have an average_rating of more than 4.
    SELECT * FROM Restaurants WHERE delivery_available = true AND average_rating > 4;

Problem-20: Write a query to fetch all restaurants where the cuisine_type field is not set or is null.
    SELECT * FROM Restaurants WHERE cuisine_type IS NULL OR cuisine_type = '';

Problem: Write a query to count the number of restaurants that have delivery_available.
    SELECT COUNT(*) FROM Restaurants WHERE delivery_available = true;
    
Problem: Write a query to fetch all restaurants whose location contains 'New York'.
    SELECT * FROM Restaurants WHERE location LIKE '%New York%';

Problem: Write a query to calculate the average average_rating of all restaurants.
    SELECT AVG(average_rating) FROM Restaurants;

Problem: Write a query to fetch the top 5 restaurants when ordered by average_rating in descending order
    SELECT * FROM Restaurants ORDER BY average_rating DESC LIMIT 5;

Problem: Write a query to delete the restaurant with id 3.
    DELETE FROM Restaurants WHERE id = 3;
    

    -------------------------------------------------  SET-3  ------------------------------------------------------------

Problem: Create a Rides table / collection with the fields defined above.
    CREATE TABLE Rides (
    id INT PRIMARY KEY,
    driver_id INT,
    passenger_id INT,
    start_location VARCHAR(255),
    end_location VARCHAR(255),
    distance DECIMAL(5,2),
    ride_time DECIMAL(5,2),
    fare DECIMAL(6,2)
);

Problem: Insert five rows / documents into the Rides table / collection with data of your choice.
   INSERT INTO Rides (id, driver_id, passenger_id, start_location, end_location, distance, ride_time, fare)
   VALUES
    (1, 101, 201, '123 Main St', '456 Elm St', 10.5, 20.0, 25.0),
    (2, 102, 202, '789 Oak Rd', '101 Maple Ln', 5.2, 12.5, 15.0),
    (3, 103, 203, '202 Cedar Dr', '303 Pine Ave', 8.7, 18.0, 20.0),
    (4, 104, 204, '404 Birch Rd', '505 Willow St', 3.1, 7.5, 10.0),
    (5, 105, 205, '606 Oak St', '707 Elm Ave', 6.0, 15.0, 18.5);

Problem: Write a query to fetch all rides, ordered by fare in descending order.
   SELECT * FROM Rides ORDER BY fare DESC;

Problem: Write a query to calculate the total distance and total fare for all rides.
   SELECT SUM(distance) AS total_distance, SUM(fare) AS total_fare FROM Rides;

Problem: Write a query to calculate the average ride_time of all rides.
   SELECT AVG(ride_time) AS average_ride_time FROM Rides;

Problem: Write a query to fetch all rides whose start_location or end_location contains 'Downtown'.
   SELECT * FROM Rides WHERE start_location LIKE '%Downtown%' OR end_location LIKE '%Downtown%';

Problem: Write a query to count the number of rides for a given driver_id.
   SELECT COUNT(*) FROM Rides WHERE driver_id = your_driver_id;

Problem: Write a query to update the fare of the ride with id 4.
   UPDATE Rides SET fare = your_new_fare WHERE id = 4;

Problem: Write a query to calculate the total fare for each driver_id.
   SELECT driver_id, SUM(fare) AS total_fare FROM Rides GROUP BY driver_id;

Problem: Write a query to delete the ride with id 2.
   DELETE FROM Rides WHERE id = 2;

    -----------------------------------------------------  SET-4  ------------------------------------------------------------

Problem: Write a query to find the ride with the highest and lowest fare.
   For the ride with the highest fare:
      SELECT * FROM Rides ORDER BY fare DESC LIMIT 1;

   For the ride with the lowest fare:
      SELECT * FROM Rides ORDER BY fare ASC LIMIT 1;

Problem: Write a query to find the average fare and distance for each driver_id.
    SELECT driver_id, AVG(fare) AS average_fare, AVG(distance) AS average_distance
    FROM Rides
    GROUP BY driver_id;

Problem: Write a query to find driver_id that have completed more than 5 rides.
    SELECT driver_id, COUNT(*) AS ride_count
    FROM Rides
    GROUP BY driver_id
    HAVING COUNT(*) > 5;

roblem: Assuming there is another collection/table called Drivers with driver_id and name fields, write a query to find the name of the driver with the highest fare.
    SELECT D.name
    FROM Drivers D
    JOIN Rides R ON D.driver_id = R.driver_id
    ORDER BY R.fare DESC
    LIMIT 1;

Problem: Write a query to find the top 3 drivers who have earned the most from fares. Return the drivers' ids and total earnings.
    SELECT R.driver_id, SUM(R.fare) AS total_earnings
    FROM Rides R
    GROUP BY R.driver_id
    ORDER BY total_earnings DESC
    LIMIT 3;
    
Problem: Assuming there's a ride_date field of date type in the Rides table / collection, write a query to find all rides that happened in the last 7 days.
    SELECT *
    FROM Rides
    WHERE ride_date >= CURDATE() - INTERVAL 7 DAY AND ride_date <= CURDATE();

Problem: Write a query to find all rides where the end_location is not set.
    SELECT * FROM Rides WHERE end_location IS NULL OR end_location = '';
    
Problem: Write a query to calculate the fare per mile for each ride and return the ride ids and their fare per mile, ordered by fare per mile in descending order.
   SELECT id, fare / distance AS fare_per_mile
   FROM Rides ORDER BY fare_per_mile DESC;
      
Problem: Assuming there's another collection/table Passengers with passenger_id and name fields, write a query to return a list of all rides including the driver's name and passenger's name.
   SELECT R.*, D.name AS driver_name, P.name AS passenger_name
   FROM Rides R
   JOIN Drivers D ON R.driver_id = D.driver_id
   JOIN Passengers P ON R.passenger_id = P.passenger_id;

Problem: Write a query to add a tip field to the Rides table / collection.
   ALTER TABLE Rides ADD COLUMN tip DECIMAL(6,2);
   
